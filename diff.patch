diff --git a/src/helpers/showSortUtils.ts b/src/helpers/showSortUtils.ts
index 0d06dc8..97291bc 100644
--- a/src/helpers/showSortUtils.ts
+++ b/src/helpers/showSortUtils.ts
@@ -98,5 +98,5 @@ export {
     sortShowsByReleaseDateAsc,
     sortShowsByReleaseDateDesc,
     sortShowsAlphaAsc,
-    sortShowsAlphaDesc,
+    sortShowsAlphaDesc
 };
diff --git a/src/screens/search_results/SearchResultsHeader.tsx b/src/screens/search_results/SearchResultsHeader.tsx
index d19f90b..be40474 100644
--- a/src/screens/search_results/SearchResultsHeader.tsx
+++ b/src/screens/search_results/SearchResultsHeader.tsx
@@ -1,10 +1,11 @@
-import React, { Dispatch, SetStateAction, useState } from 'react';
-import { ViewModule, ViewList } from '@mui/icons-material';
+import React, { Dispatch, SetStateAction, useEffect, useState } from 'react';
+import { ViewModule, ViewList, FilterAltOff, Tv, Movie } from '@mui/icons-material';
 import { ToggleButtonGroup, ToggleButton, SvgIcon, Typography as Typ } from '@mui/material';
 import { useWindowSize } from '../../hooks';
-import { sortShowsAlphaAsc, sortShowsAlphaDesc } from '../../helpers';
+import { sortShowsAlphaAsc, sortShowsAlphaDesc, filterShowsByType } from '../../helpers';
 import Logger from '../../logger';
 import { ShowData } from '../../types';
+import { preview } from 'vite';
 
 const LOG = new Logger('SearchResultsHeader');
 
@@ -39,6 +40,10 @@ interface SearchResultsHeaderProps {
     disableControls?: boolean;
 }
 
+interface SortFilterProps {
+    sort: null | ((showData: ShowData[]) => ShowData[]);
+    filter: null | ((showData: ShowData[], type: 'tv' | 'movie') => ShowData[]);
+}
 /**
  * Heading of the screen showing the search query
  * and containing the view toggle button.
@@ -52,39 +57,15 @@ const SearchResultsHeader: React.FC<SearchResultsHeaderProps> = ({
     setHash,
     disableControls = false,
 }) => {
-    const [sortState, setSortState] = useState<'alpha' | 'rev' | 'none'>('none');
+    const [sortState, setSortState] = useState<'alpha' | 'rev' | null>(null);
+    const [filterShowType, setFilterShowType] = useState<'tv' | 'movie' | null>(null)
     const windowSize = useWindowSize();
+    const [sortAndFilters, setSortAndFilters] = useState<SortFilterProps>({ sort: 'none', filter: 'none' })
 
-    const handleViewToggle = (view: 'grid' | 'list') => {
-        setViewState?.(view);
-        localStorage.setItem('streamabilityView', view);
-        setHash?.(Math.random());
-    };
-
-    const handleSortAlpha = () => {
-        const sortedShows = sortShowsAlphaAsc(showDetails || []);
-        setShowDetails?.(sortedShows);
-        setSortState('alpha');
-        setHash?.(Math.random());
-    };
+    console.log(sortAndFilters.filter);
+    setSortAndFilters({ sort: 'tv', filter: 'tv' });
 
-    const handleSortRevAlpha = () => {
-        const sortedShows = sortShowsAlphaDesc(showDetails || []);
-        setShowDetails?.(sortedShows);
-        setSortState('rev');
-        setHash?.(Math.random());
-    };
 
-    const handleRemoveSort = () => {
-        const unsortedShows = localStorage.getItem('streamabilityUnsortedResults');
-        if (!unsortedShows) {
-            LOG.error('Unable to un-sort shows!');
-            return;
-        }
-        setShowDetails?.(JSON.parse(unsortedShows));
-        setSortState('none');
-        setHash?.(Math.random());
-    };
 
     return (
         <div className='flex flex-wrap justify-between align-middle w-full p-3'>
@@ -92,11 +73,53 @@ const SearchResultsHeader: React.FC<SearchResultsHeaderProps> = ({
                 Search results for: <span className='underline'>{query}</span>
             </Typ>
             <div>
+                <ToggleButtonGroup
+                    value={filterShowType}
+                    exclusive
+                    sx={{ marginRight: 2 }}
+
+                >
+                    <ToggleButton
+                        value='tv'
+                        aria-label='filter by tv shows'
+                        onClick={() => {
+                            setFilterShowType('tv');
+                            setSortAndFilters({ sort: sortAndFilters.sort, filter: (showData: ShowData[]) => filterShowsByType(showData, 'tv') });
+
+                        }}
+                        disabled={disableControls}
+                    >
+                        <Tv />
+                    </ToggleButton>
+                    <ToggleButton
+                        value='movie'
+                        aria-label='filter by movies'
+                        onClick={() => {
+                            setFilterShowType('movie')
+                            setSortAndFilters({ sort: sortAndFilters.sort, filter: (showData: ShowData[]) => filterShowsByType(showData, 'movie') });
+                        }}
+                        disabled={disableControls}
+                    >
+                        <Movie />
+                    </ToggleButton>
+                    <ToggleButton
+                        value='none'
+                        aria-label='Remove filter'
+                        onClick={() => { }}
+                        disabled={disableControls}
+                    >
+                        <FilterAltOff />
+                    </ToggleButton>
+                </ToggleButtonGroup>
+
                 <ToggleButtonGroup value={sortState} exclusive sx={{ marginRight: 2 }}>
                     <ToggleButton
                         value='alpha'
                         aria-label='sort results alphabetically'
-                        onClick={handleSortAlpha}
+                        onClick={() => {
+                            setFilterShowType(null)
+                            setSortAndFilters({ sort: sortAndFilters.sort, filter: null });
+                        }}
                         disabled={disableControls}
                     >
                         <SvgIcon>
@@ -168,6 +191,7 @@ const SearchResultsHeader: React.FC<SearchResultsHeaderProps> = ({
                         <ViewList />
                     </ToggleButton>
                 </ToggleButtonGroup>
+
             </div>
         </div>
     );
